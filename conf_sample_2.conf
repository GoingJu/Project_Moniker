filter {
    mutate {
        replace => {
            "WHEN" => ""
            "SRCLOG" => ""
            "TIPOLOG" => ""
            "USERNAME" => ""
            "SRCLOGIP" => ""
            "COMPUTERNAME" => ""
            "APPLICATION" => ""
            "CATEGORY" => ""
            "CONTENT" => ""
            "CONNTYPE" => ""
            "RESOURCE" => ""
            "ACTION" => ""
        }
    }

    # Extract fields from the raw log.
    grok {
        match => {
            "message" => ["(<\d+>)?%{SYSLOGTIMESTAMP:WHEN} %{SYSLOGHOST:SRCLOG} %{DATA}: %{GREEDYDATA:TIPOLOG} log: Users: %{GREEDYDATA:USERNAME}, Source IP: %{GREEDYDATA:SRCLOGIP}, Computer name: %{GREEDYDATA:COMPUTERNAME}, Application: %{GREEDYDATA:APPLICATION}, Category: %{DATA:CATEGORY}, Content: %{GREEDYDATA:CONTENT}"
            "(<\d+>)?%{SYSLOGTIMESTAMP:WHEN} %{SYSLOGHOST:SRCLOG} %{DATA}: %{GREEDYDATA:TIPOLOG} log: Users: %{USERNAME:USERNAME}, Source IP: %{GREEDYDATA:SRCLOGIP}, Computer name: %{GREEDYDATA:COMPUTERNAME}, Connection type: %{DATA:CONNTYPE}, Accessed resources: %{DATA:RESOURCE}, Action: %{GREEDYDATA:ACTION}"]
        }
        overwrite => ["WHEN","SRCLOG","TIPOLOG","USERNAME","SRCLOGIP","COMPUTERNAME","APPLICATION","CATEGORY","CONTENT","CONNTYPE","RESOURCE","ACTION"]
        on_error => "not_valid_log"
    }

    # Parse event timestamp
    if [WHEN] != "" {
        date {
            match => [ "WHEN", "MMM dd HH:mm:ss", "MMM d HH:mm:ss"]
            rebase => true
        }
    }
    # Save the value in "when" to the event timestamp
    mutate {
        rename => {
            "WHEN" => "timestamp"
        }
        on_error => "timestamp_error"
    }    

    # Transform and save username
    if [USERNAME] not in [ "-" ,"" ] {
        mutate {
            lowercase => ["USERNAME"]
        }
    }
    mutate {
        replace => {
            "event.idm.read_only_udm.principal.user.userid" => "%{USERNAME}"
        }
        on_error => "Username_error"
    }

    #Convert the SRCLOGIP from GREEDYDATA to IP:
    mutate {
        replace => {
            "src_ip_temp" => "%{SRCLOGIP}"
        }
        convert => {
            "src_ip_temp" => "ipaddress"
        }
        on_error => "not_a_src_ip"
    }

    if ![not_a_src_ip] {
        mutate {
            merge => {
                "event.idm.read_only_udm.principal.ip" => "SRCLOGIP"
            }
        }
    }

    mutate {
        replace => {
            "event.idm.read_only_udm.metadata.product_name" => "QNAP Nas"
            "event.idm.read_only_udm.metadata.vendor_name" => "QNAP"
            "event.idm.read_only_udm.target.hostname" => "%{SRCLOG}"
            "event.idm.read_only_udm.target.application" => "%{APPLICATION}"
            "event.idm.read_only_udm.target.file.full_path" => "%{RESOURCE}"
            "event.idm.read_only_udm.principal.hostname" => "%{COMPUTERNAME}"
            "event.idm.read_only_udm.metadata.description" => "%{CONTENT}"
            "event.idm.read_only_udm.network.application_protocol_version" => "%{CONNTYPE}"
            "event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
        }
        on_error => "multiple_replace_error"
    }

    # save  event to @output
    mutate {
        merge => {
            "@output" => "event"
        }
    }
}
